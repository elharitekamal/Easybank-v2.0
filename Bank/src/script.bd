DROP TABLE IF EXISTS client;
DROP TABLE IF EXISTS employe;
DROP TABLE IF EXISTS mission;
DROP TABLE IF EXISTS compte;
DROP TABLE IF EXISTS compteCourant;
DROP TABLE IF EXISTS compteEpargne;
DROP TABLE IF EXISTS compte;
DROP TABLE IF EXISTS affectation;





CREATE TABLE client (
    code INT PRIMARY KEY,
    prenom VARCHAR(20) NOT NULL,
    nom VARCHAR(20) NOT NULL,
    dateNaissance DATE NOT NULL,
    telephone VARCHAR(20) NOT NULL,
    address VARCHAR(20) NOT NULL
);


CREATE TABLE employe (
    matricule SERIAL PRIMARY KEY,
    prenom VARCHAR(20) NOT NULL,
    nom VARCHAR(20) NOT NULL,
    dateNaissance DATE NOT NULL,
    telephone VARCHAR(20) NOT NULL,
    email VARCHAR(20) NOT NULL,
    address VARCHAR(20) NOT NULL,
    dateRecrutement DATE NOT NULL
);

CREATE TABLE mission (
    code SERIAL PRIMARY KEY,
    nom VARCHAR(20) NOT NULL,
    description VARCHAR(20) NOT NULL
);


CREATE TYPE compte_etat AS ENUM ('actif', 'inactif');


CREATE TABLE compte (
    numero INT PRIMARY KEY,
    solde DOUBLE PRECISION NOT NULL,
    dateCreation TIMESTAMP NOT NULL,
    etat compte_etat NOT NULL,
    client int NOT NULL,
    employe int NOT NULL,
    FOREIGN KEY (client) REFERENCES client(code),
    FOREIGN KEY (employe) REFERENCES employe(matricule)

);



CREATE TABLE compteCourant(
      num_compte INT NOT NULL,
      decouvert DOUBLE PRECISION NOT NULL,
      FOREIGN KEY (num_compte) REFERENCES compte(numero) ON DELETE CASCADE
);

CREATE TABLE compteEpargne(
      num_compte INT NOT NULL,
      tauxInteret DOUBLE PRECISION NOT NULL,
      FOREIGN KEY (num_compte) REFERENCES compte(numero) ON DELETE CASCADE
);


CREATE TYPE operation_type AS ENUM ('virement', 'retrait');


CREATE TABLE operation (
    numero SERIAL PRIMARY KEY,
    dateCreation DATE NOT NULL,
    montant DOUBLE PRECISION NOT NULL,
    type operation_type NOT NULL,
    compte INT NOT NULL,
    employe INT NOT NULL,
    FOREIGN KEY (compte) REFERENCES compte(numero),
    FOREIGN KEY (employe) REFERENCES employe(matricule)
);


CREATE TABLE affectation(
    mission INT NOT NULL,
    employe INT NOT NULL,
    dateDebut Date NOT NULL,
    dateFin Date DEFAULT NULL,
    FOREIGN KEY (mission) REFERENCES mission(code),
    FOREIGN KEY (employe) REFERENCES employe(matricule)
);







////////////////////////////////////////////////


CREATE OR REPLACE FUNCTION create_compteCourant(
    p_numero INT,
    p_solde DOUBLE PRECISION,
    p_dateCreation DATE,
    p_etat compte_etat,
    p_client INT,
    p_employe INT,
    p_decouvert DOUBLE PRECISION
)
RETURNS VOID AS $$
BEGIN

    INSERT INTO compte(numero, solde, dateCreation, etat, client, employe)
    VALUES (p_numero, p_solde, p_dateCreation, p_etat, p_client, p_employe);

    INSERT INTO compteCourant(num_compte, decouvert)
    VALUES (p_numero, p_decouvert);
END;
$$ LANGUAGE plpgsql;


